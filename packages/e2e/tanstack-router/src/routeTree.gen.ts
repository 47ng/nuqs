/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScrollImport } from './routes/scroll'
import { Route as PrettyUrlsImport } from './routes/pretty-urls'
import { Route as HashPreservationImport } from './routes/hash-preservation'
import { Route as ShallowUseQueryStatesImport } from './routes/shallow.useQueryStates'
import { Route as ShallowUseQueryStateImport } from './routes/shallow.useQueryState'
import { Route as RoutingUseQueryStatesImport } from './routes/routing.useQueryStates'
import { Route as RoutingUseQueryStateImport } from './routes/routing.useQueryState'
import { Route as ReferentialStabilityUseQueryStatesImport } from './routes/referential-stability.useQueryStates'
import { Route as ReferentialStabilityUseQueryStateImport } from './routes/referential-stability.useQueryState'
import { Route as PushUseQueryStatesImport } from './routes/push.useQueryStates'
import { Route as PushUseQueryStateImport } from './routes/push.useQueryState'
import { Route as LinkingUseQueryStatesImport } from './routes/linking.useQueryStates'
import { Route as LinkingUseQueryStateImport } from './routes/linking.useQueryState'
import { Route as FormUseQueryStatesImport } from './routes/form.useQueryStates'
import { Route as FormUseQueryStateImport } from './routes/form.useQueryState'
import { Route as ConditionalRenderingUseQueryStatesImport } from './routes/conditional-rendering.useQueryStates'
import { Route as ConditionalRenderingUseQueryStateImport } from './routes/conditional-rendering.useQueryState'
import { Route as BasicIoUseQueryStatesImport } from './routes/basic-io.useQueryStates'
import { Route as BasicIoUseQueryStateImport } from './routes/basic-io.useQueryState'
import { Route as RoutingUseQueryStatesOtherImport } from './routes/routing.useQueryStates.other'
import { Route as RoutingUseQueryStateOtherImport } from './routes/routing.useQueryState.other'
import { Route as LinkingUseQueryStatesOtherImport } from './routes/linking.useQueryStates.other'
import { Route as LinkingUseQueryStateOtherImport } from './routes/linking.useQueryState.other'

// Create/Update Routes

const ScrollRoute = ScrollImport.update({
  id: '/scroll',
  path: '/scroll',
  getParentRoute: () => rootRoute,
} as any)

const PrettyUrlsRoute = PrettyUrlsImport.update({
  id: '/pretty-urls',
  path: '/pretty-urls',
  getParentRoute: () => rootRoute,
} as any)

const HashPreservationRoute = HashPreservationImport.update({
  id: '/hash-preservation',
  path: '/hash-preservation',
  getParentRoute: () => rootRoute,
} as any)

const ShallowUseQueryStatesRoute = ShallowUseQueryStatesImport.update({
  id: '/shallow/useQueryStates',
  path: '/shallow/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const ShallowUseQueryStateRoute = ShallowUseQueryStateImport.update({
  id: '/shallow/useQueryState',
  path: '/shallow/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const RoutingUseQueryStatesRoute = RoutingUseQueryStatesImport.update({
  id: '/routing/useQueryStates',
  path: '/routing/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const RoutingUseQueryStateRoute = RoutingUseQueryStateImport.update({
  id: '/routing/useQueryState',
  path: '/routing/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const ReferentialStabilityUseQueryStatesRoute =
  ReferentialStabilityUseQueryStatesImport.update({
    id: '/referential-stability/useQueryStates',
    path: '/referential-stability/useQueryStates',
    getParentRoute: () => rootRoute,
  } as any)

const ReferentialStabilityUseQueryStateRoute =
  ReferentialStabilityUseQueryStateImport.update({
    id: '/referential-stability/useQueryState',
    path: '/referential-stability/useQueryState',
    getParentRoute: () => rootRoute,
  } as any)

const PushUseQueryStatesRoute = PushUseQueryStatesImport.update({
  id: '/push/useQueryStates',
  path: '/push/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const PushUseQueryStateRoute = PushUseQueryStateImport.update({
  id: '/push/useQueryState',
  path: '/push/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const LinkingUseQueryStatesRoute = LinkingUseQueryStatesImport.update({
  id: '/linking/useQueryStates',
  path: '/linking/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const LinkingUseQueryStateRoute = LinkingUseQueryStateImport.update({
  id: '/linking/useQueryState',
  path: '/linking/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const FormUseQueryStatesRoute = FormUseQueryStatesImport.update({
  id: '/form/useQueryStates',
  path: '/form/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const FormUseQueryStateRoute = FormUseQueryStateImport.update({
  id: '/form/useQueryState',
  path: '/form/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const ConditionalRenderingUseQueryStatesRoute =
  ConditionalRenderingUseQueryStatesImport.update({
    id: '/conditional-rendering/useQueryStates',
    path: '/conditional-rendering/useQueryStates',
    getParentRoute: () => rootRoute,
  } as any)

const ConditionalRenderingUseQueryStateRoute =
  ConditionalRenderingUseQueryStateImport.update({
    id: '/conditional-rendering/useQueryState',
    path: '/conditional-rendering/useQueryState',
    getParentRoute: () => rootRoute,
  } as any)

const BasicIoUseQueryStatesRoute = BasicIoUseQueryStatesImport.update({
  id: '/basic-io/useQueryStates',
  path: '/basic-io/useQueryStates',
  getParentRoute: () => rootRoute,
} as any)

const BasicIoUseQueryStateRoute = BasicIoUseQueryStateImport.update({
  id: '/basic-io/useQueryState',
  path: '/basic-io/useQueryState',
  getParentRoute: () => rootRoute,
} as any)

const RoutingUseQueryStatesOtherRoute = RoutingUseQueryStatesOtherImport.update(
  {
    id: '/other',
    path: '/other',
    getParentRoute: () => RoutingUseQueryStatesRoute,
  } as any,
)

const RoutingUseQueryStateOtherRoute = RoutingUseQueryStateOtherImport.update({
  id: '/other',
  path: '/other',
  getParentRoute: () => RoutingUseQueryStateRoute,
} as any)

const LinkingUseQueryStatesOtherRoute = LinkingUseQueryStatesOtherImport.update(
  {
    id: '/other',
    path: '/other',
    getParentRoute: () => LinkingUseQueryStatesRoute,
  } as any,
)

const LinkingUseQueryStateOtherRoute = LinkingUseQueryStateOtherImport.update({
  id: '/other',
  path: '/other',
  getParentRoute: () => LinkingUseQueryStateRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/hash-preservation': {
      id: '/hash-preservation'
      path: '/hash-preservation'
      fullPath: '/hash-preservation'
      preLoaderRoute: typeof HashPreservationImport
      parentRoute: typeof rootRoute
    }
    '/pretty-urls': {
      id: '/pretty-urls'
      path: '/pretty-urls'
      fullPath: '/pretty-urls'
      preLoaderRoute: typeof PrettyUrlsImport
      parentRoute: typeof rootRoute
    }
    '/scroll': {
      id: '/scroll'
      path: '/scroll'
      fullPath: '/scroll'
      preLoaderRoute: typeof ScrollImport
      parentRoute: typeof rootRoute
    }
    '/basic-io/useQueryState': {
      id: '/basic-io/useQueryState'
      path: '/basic-io/useQueryState'
      fullPath: '/basic-io/useQueryState'
      preLoaderRoute: typeof BasicIoUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/basic-io/useQueryStates': {
      id: '/basic-io/useQueryStates'
      path: '/basic-io/useQueryStates'
      fullPath: '/basic-io/useQueryStates'
      preLoaderRoute: typeof BasicIoUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/conditional-rendering/useQueryState': {
      id: '/conditional-rendering/useQueryState'
      path: '/conditional-rendering/useQueryState'
      fullPath: '/conditional-rendering/useQueryState'
      preLoaderRoute: typeof ConditionalRenderingUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/conditional-rendering/useQueryStates': {
      id: '/conditional-rendering/useQueryStates'
      path: '/conditional-rendering/useQueryStates'
      fullPath: '/conditional-rendering/useQueryStates'
      preLoaderRoute: typeof ConditionalRenderingUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/form/useQueryState': {
      id: '/form/useQueryState'
      path: '/form/useQueryState'
      fullPath: '/form/useQueryState'
      preLoaderRoute: typeof FormUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/form/useQueryStates': {
      id: '/form/useQueryStates'
      path: '/form/useQueryStates'
      fullPath: '/form/useQueryStates'
      preLoaderRoute: typeof FormUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/linking/useQueryState': {
      id: '/linking/useQueryState'
      path: '/linking/useQueryState'
      fullPath: '/linking/useQueryState'
      preLoaderRoute: typeof LinkingUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/linking/useQueryStates': {
      id: '/linking/useQueryStates'
      path: '/linking/useQueryStates'
      fullPath: '/linking/useQueryStates'
      preLoaderRoute: typeof LinkingUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/push/useQueryState': {
      id: '/push/useQueryState'
      path: '/push/useQueryState'
      fullPath: '/push/useQueryState'
      preLoaderRoute: typeof PushUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/push/useQueryStates': {
      id: '/push/useQueryStates'
      path: '/push/useQueryStates'
      fullPath: '/push/useQueryStates'
      preLoaderRoute: typeof PushUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/referential-stability/useQueryState': {
      id: '/referential-stability/useQueryState'
      path: '/referential-stability/useQueryState'
      fullPath: '/referential-stability/useQueryState'
      preLoaderRoute: typeof ReferentialStabilityUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/referential-stability/useQueryStates': {
      id: '/referential-stability/useQueryStates'
      path: '/referential-stability/useQueryStates'
      fullPath: '/referential-stability/useQueryStates'
      preLoaderRoute: typeof ReferentialStabilityUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/routing/useQueryState': {
      id: '/routing/useQueryState'
      path: '/routing/useQueryState'
      fullPath: '/routing/useQueryState'
      preLoaderRoute: typeof RoutingUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/routing/useQueryStates': {
      id: '/routing/useQueryStates'
      path: '/routing/useQueryStates'
      fullPath: '/routing/useQueryStates'
      preLoaderRoute: typeof RoutingUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/shallow/useQueryState': {
      id: '/shallow/useQueryState'
      path: '/shallow/useQueryState'
      fullPath: '/shallow/useQueryState'
      preLoaderRoute: typeof ShallowUseQueryStateImport
      parentRoute: typeof rootRoute
    }
    '/shallow/useQueryStates': {
      id: '/shallow/useQueryStates'
      path: '/shallow/useQueryStates'
      fullPath: '/shallow/useQueryStates'
      preLoaderRoute: typeof ShallowUseQueryStatesImport
      parentRoute: typeof rootRoute
    }
    '/linking/useQueryState/other': {
      id: '/linking/useQueryState/other'
      path: '/other'
      fullPath: '/linking/useQueryState/other'
      preLoaderRoute: typeof LinkingUseQueryStateOtherImport
      parentRoute: typeof LinkingUseQueryStateImport
    }
    '/linking/useQueryStates/other': {
      id: '/linking/useQueryStates/other'
      path: '/other'
      fullPath: '/linking/useQueryStates/other'
      preLoaderRoute: typeof LinkingUseQueryStatesOtherImport
      parentRoute: typeof LinkingUseQueryStatesImport
    }
    '/routing/useQueryState/other': {
      id: '/routing/useQueryState/other'
      path: '/other'
      fullPath: '/routing/useQueryState/other'
      preLoaderRoute: typeof RoutingUseQueryStateOtherImport
      parentRoute: typeof RoutingUseQueryStateImport
    }
    '/routing/useQueryStates/other': {
      id: '/routing/useQueryStates/other'
      path: '/other'
      fullPath: '/routing/useQueryStates/other'
      preLoaderRoute: typeof RoutingUseQueryStatesOtherImport
      parentRoute: typeof RoutingUseQueryStatesImport
    }
  }
}

// Create and export the route tree

interface LinkingUseQueryStateRouteChildren {
  LinkingUseQueryStateOtherRoute: typeof LinkingUseQueryStateOtherRoute
}

const LinkingUseQueryStateRouteChildren: LinkingUseQueryStateRouteChildren = {
  LinkingUseQueryStateOtherRoute: LinkingUseQueryStateOtherRoute,
}

const LinkingUseQueryStateRouteWithChildren =
  LinkingUseQueryStateRoute._addFileChildren(LinkingUseQueryStateRouteChildren)

interface LinkingUseQueryStatesRouteChildren {
  LinkingUseQueryStatesOtherRoute: typeof LinkingUseQueryStatesOtherRoute
}

const LinkingUseQueryStatesRouteChildren: LinkingUseQueryStatesRouteChildren = {
  LinkingUseQueryStatesOtherRoute: LinkingUseQueryStatesOtherRoute,
}

const LinkingUseQueryStatesRouteWithChildren =
  LinkingUseQueryStatesRoute._addFileChildren(
    LinkingUseQueryStatesRouteChildren,
  )

interface RoutingUseQueryStateRouteChildren {
  RoutingUseQueryStateOtherRoute: typeof RoutingUseQueryStateOtherRoute
}

const RoutingUseQueryStateRouteChildren: RoutingUseQueryStateRouteChildren = {
  RoutingUseQueryStateOtherRoute: RoutingUseQueryStateOtherRoute,
}

const RoutingUseQueryStateRouteWithChildren =
  RoutingUseQueryStateRoute._addFileChildren(RoutingUseQueryStateRouteChildren)

interface RoutingUseQueryStatesRouteChildren {
  RoutingUseQueryStatesOtherRoute: typeof RoutingUseQueryStatesOtherRoute
}

const RoutingUseQueryStatesRouteChildren: RoutingUseQueryStatesRouteChildren = {
  RoutingUseQueryStatesOtherRoute: RoutingUseQueryStatesOtherRoute,
}

const RoutingUseQueryStatesRouteWithChildren =
  RoutingUseQueryStatesRoute._addFileChildren(
    RoutingUseQueryStatesRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/hash-preservation': typeof HashPreservationRoute
  '/pretty-urls': typeof PrettyUrlsRoute
  '/scroll': typeof ScrollRoute
  '/basic-io/useQueryState': typeof BasicIoUseQueryStateRoute
  '/basic-io/useQueryStates': typeof BasicIoUseQueryStatesRoute
  '/conditional-rendering/useQueryState': typeof ConditionalRenderingUseQueryStateRoute
  '/conditional-rendering/useQueryStates': typeof ConditionalRenderingUseQueryStatesRoute
  '/form/useQueryState': typeof FormUseQueryStateRoute
  '/form/useQueryStates': typeof FormUseQueryStatesRoute
  '/linking/useQueryState': typeof LinkingUseQueryStateRouteWithChildren
  '/linking/useQueryStates': typeof LinkingUseQueryStatesRouteWithChildren
  '/push/useQueryState': typeof PushUseQueryStateRoute
  '/push/useQueryStates': typeof PushUseQueryStatesRoute
  '/referential-stability/useQueryState': typeof ReferentialStabilityUseQueryStateRoute
  '/referential-stability/useQueryStates': typeof ReferentialStabilityUseQueryStatesRoute
  '/routing/useQueryState': typeof RoutingUseQueryStateRouteWithChildren
  '/routing/useQueryStates': typeof RoutingUseQueryStatesRouteWithChildren
  '/shallow/useQueryState': typeof ShallowUseQueryStateRoute
  '/shallow/useQueryStates': typeof ShallowUseQueryStatesRoute
  '/linking/useQueryState/other': typeof LinkingUseQueryStateOtherRoute
  '/linking/useQueryStates/other': typeof LinkingUseQueryStatesOtherRoute
  '/routing/useQueryState/other': typeof RoutingUseQueryStateOtherRoute
  '/routing/useQueryStates/other': typeof RoutingUseQueryStatesOtherRoute
}

export interface FileRoutesByTo {
  '/hash-preservation': typeof HashPreservationRoute
  '/pretty-urls': typeof PrettyUrlsRoute
  '/scroll': typeof ScrollRoute
  '/basic-io/useQueryState': typeof BasicIoUseQueryStateRoute
  '/basic-io/useQueryStates': typeof BasicIoUseQueryStatesRoute
  '/conditional-rendering/useQueryState': typeof ConditionalRenderingUseQueryStateRoute
  '/conditional-rendering/useQueryStates': typeof ConditionalRenderingUseQueryStatesRoute
  '/form/useQueryState': typeof FormUseQueryStateRoute
  '/form/useQueryStates': typeof FormUseQueryStatesRoute
  '/linking/useQueryState': typeof LinkingUseQueryStateRouteWithChildren
  '/linking/useQueryStates': typeof LinkingUseQueryStatesRouteWithChildren
  '/push/useQueryState': typeof PushUseQueryStateRoute
  '/push/useQueryStates': typeof PushUseQueryStatesRoute
  '/referential-stability/useQueryState': typeof ReferentialStabilityUseQueryStateRoute
  '/referential-stability/useQueryStates': typeof ReferentialStabilityUseQueryStatesRoute
  '/routing/useQueryState': typeof RoutingUseQueryStateRouteWithChildren
  '/routing/useQueryStates': typeof RoutingUseQueryStatesRouteWithChildren
  '/shallow/useQueryState': typeof ShallowUseQueryStateRoute
  '/shallow/useQueryStates': typeof ShallowUseQueryStatesRoute
  '/linking/useQueryState/other': typeof LinkingUseQueryStateOtherRoute
  '/linking/useQueryStates/other': typeof LinkingUseQueryStatesOtherRoute
  '/routing/useQueryState/other': typeof RoutingUseQueryStateOtherRoute
  '/routing/useQueryStates/other': typeof RoutingUseQueryStatesOtherRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/hash-preservation': typeof HashPreservationRoute
  '/pretty-urls': typeof PrettyUrlsRoute
  '/scroll': typeof ScrollRoute
  '/basic-io/useQueryState': typeof BasicIoUseQueryStateRoute
  '/basic-io/useQueryStates': typeof BasicIoUseQueryStatesRoute
  '/conditional-rendering/useQueryState': typeof ConditionalRenderingUseQueryStateRoute
  '/conditional-rendering/useQueryStates': typeof ConditionalRenderingUseQueryStatesRoute
  '/form/useQueryState': typeof FormUseQueryStateRoute
  '/form/useQueryStates': typeof FormUseQueryStatesRoute
  '/linking/useQueryState': typeof LinkingUseQueryStateRouteWithChildren
  '/linking/useQueryStates': typeof LinkingUseQueryStatesRouteWithChildren
  '/push/useQueryState': typeof PushUseQueryStateRoute
  '/push/useQueryStates': typeof PushUseQueryStatesRoute
  '/referential-stability/useQueryState': typeof ReferentialStabilityUseQueryStateRoute
  '/referential-stability/useQueryStates': typeof ReferentialStabilityUseQueryStatesRoute
  '/routing/useQueryState': typeof RoutingUseQueryStateRouteWithChildren
  '/routing/useQueryStates': typeof RoutingUseQueryStatesRouteWithChildren
  '/shallow/useQueryState': typeof ShallowUseQueryStateRoute
  '/shallow/useQueryStates': typeof ShallowUseQueryStatesRoute
  '/linking/useQueryState/other': typeof LinkingUseQueryStateOtherRoute
  '/linking/useQueryStates/other': typeof LinkingUseQueryStatesOtherRoute
  '/routing/useQueryState/other': typeof RoutingUseQueryStateOtherRoute
  '/routing/useQueryStates/other': typeof RoutingUseQueryStatesOtherRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/hash-preservation'
    | '/pretty-urls'
    | '/scroll'
    | '/basic-io/useQueryState'
    | '/basic-io/useQueryStates'
    | '/conditional-rendering/useQueryState'
    | '/conditional-rendering/useQueryStates'
    | '/form/useQueryState'
    | '/form/useQueryStates'
    | '/linking/useQueryState'
    | '/linking/useQueryStates'
    | '/push/useQueryState'
    | '/push/useQueryStates'
    | '/referential-stability/useQueryState'
    | '/referential-stability/useQueryStates'
    | '/routing/useQueryState'
    | '/routing/useQueryStates'
    | '/shallow/useQueryState'
    | '/shallow/useQueryStates'
    | '/linking/useQueryState/other'
    | '/linking/useQueryStates/other'
    | '/routing/useQueryState/other'
    | '/routing/useQueryStates/other'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/hash-preservation'
    | '/pretty-urls'
    | '/scroll'
    | '/basic-io/useQueryState'
    | '/basic-io/useQueryStates'
    | '/conditional-rendering/useQueryState'
    | '/conditional-rendering/useQueryStates'
    | '/form/useQueryState'
    | '/form/useQueryStates'
    | '/linking/useQueryState'
    | '/linking/useQueryStates'
    | '/push/useQueryState'
    | '/push/useQueryStates'
    | '/referential-stability/useQueryState'
    | '/referential-stability/useQueryStates'
    | '/routing/useQueryState'
    | '/routing/useQueryStates'
    | '/shallow/useQueryState'
    | '/shallow/useQueryStates'
    | '/linking/useQueryState/other'
    | '/linking/useQueryStates/other'
    | '/routing/useQueryState/other'
    | '/routing/useQueryStates/other'
  id:
    | '__root__'
    | '/hash-preservation'
    | '/pretty-urls'
    | '/scroll'
    | '/basic-io/useQueryState'
    | '/basic-io/useQueryStates'
    | '/conditional-rendering/useQueryState'
    | '/conditional-rendering/useQueryStates'
    | '/form/useQueryState'
    | '/form/useQueryStates'
    | '/linking/useQueryState'
    | '/linking/useQueryStates'
    | '/push/useQueryState'
    | '/push/useQueryStates'
    | '/referential-stability/useQueryState'
    | '/referential-stability/useQueryStates'
    | '/routing/useQueryState'
    | '/routing/useQueryStates'
    | '/shallow/useQueryState'
    | '/shallow/useQueryStates'
    | '/linking/useQueryState/other'
    | '/linking/useQueryStates/other'
    | '/routing/useQueryState/other'
    | '/routing/useQueryStates/other'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  HashPreservationRoute: typeof HashPreservationRoute
  PrettyUrlsRoute: typeof PrettyUrlsRoute
  ScrollRoute: typeof ScrollRoute
  BasicIoUseQueryStateRoute: typeof BasicIoUseQueryStateRoute
  BasicIoUseQueryStatesRoute: typeof BasicIoUseQueryStatesRoute
  ConditionalRenderingUseQueryStateRoute: typeof ConditionalRenderingUseQueryStateRoute
  ConditionalRenderingUseQueryStatesRoute: typeof ConditionalRenderingUseQueryStatesRoute
  FormUseQueryStateRoute: typeof FormUseQueryStateRoute
  FormUseQueryStatesRoute: typeof FormUseQueryStatesRoute
  LinkingUseQueryStateRoute: typeof LinkingUseQueryStateRouteWithChildren
  LinkingUseQueryStatesRoute: typeof LinkingUseQueryStatesRouteWithChildren
  PushUseQueryStateRoute: typeof PushUseQueryStateRoute
  PushUseQueryStatesRoute: typeof PushUseQueryStatesRoute
  ReferentialStabilityUseQueryStateRoute: typeof ReferentialStabilityUseQueryStateRoute
  ReferentialStabilityUseQueryStatesRoute: typeof ReferentialStabilityUseQueryStatesRoute
  RoutingUseQueryStateRoute: typeof RoutingUseQueryStateRouteWithChildren
  RoutingUseQueryStatesRoute: typeof RoutingUseQueryStatesRouteWithChildren
  ShallowUseQueryStateRoute: typeof ShallowUseQueryStateRoute
  ShallowUseQueryStatesRoute: typeof ShallowUseQueryStatesRoute
}

const rootRouteChildren: RootRouteChildren = {
  HashPreservationRoute: HashPreservationRoute,
  PrettyUrlsRoute: PrettyUrlsRoute,
  ScrollRoute: ScrollRoute,
  BasicIoUseQueryStateRoute: BasicIoUseQueryStateRoute,
  BasicIoUseQueryStatesRoute: BasicIoUseQueryStatesRoute,
  ConditionalRenderingUseQueryStateRoute:
    ConditionalRenderingUseQueryStateRoute,
  ConditionalRenderingUseQueryStatesRoute:
    ConditionalRenderingUseQueryStatesRoute,
  FormUseQueryStateRoute: FormUseQueryStateRoute,
  FormUseQueryStatesRoute: FormUseQueryStatesRoute,
  LinkingUseQueryStateRoute: LinkingUseQueryStateRouteWithChildren,
  LinkingUseQueryStatesRoute: LinkingUseQueryStatesRouteWithChildren,
  PushUseQueryStateRoute: PushUseQueryStateRoute,
  PushUseQueryStatesRoute: PushUseQueryStatesRoute,
  ReferentialStabilityUseQueryStateRoute:
    ReferentialStabilityUseQueryStateRoute,
  ReferentialStabilityUseQueryStatesRoute:
    ReferentialStabilityUseQueryStatesRoute,
  RoutingUseQueryStateRoute: RoutingUseQueryStateRouteWithChildren,
  RoutingUseQueryStatesRoute: RoutingUseQueryStatesRouteWithChildren,
  ShallowUseQueryStateRoute: ShallowUseQueryStateRoute,
  ShallowUseQueryStatesRoute: ShallowUseQueryStatesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/hash-preservation",
        "/pretty-urls",
        "/scroll",
        "/basic-io/useQueryState",
        "/basic-io/useQueryStates",
        "/conditional-rendering/useQueryState",
        "/conditional-rendering/useQueryStates",
        "/form/useQueryState",
        "/form/useQueryStates",
        "/linking/useQueryState",
        "/linking/useQueryStates",
        "/push/useQueryState",
        "/push/useQueryStates",
        "/referential-stability/useQueryState",
        "/referential-stability/useQueryStates",
        "/routing/useQueryState",
        "/routing/useQueryStates",
        "/shallow/useQueryState",
        "/shallow/useQueryStates"
      ]
    },
    "/hash-preservation": {
      "filePath": "hash-preservation.tsx"
    },
    "/pretty-urls": {
      "filePath": "pretty-urls.tsx"
    },
    "/scroll": {
      "filePath": "scroll.tsx"
    },
    "/basic-io/useQueryState": {
      "filePath": "basic-io.useQueryState.tsx"
    },
    "/basic-io/useQueryStates": {
      "filePath": "basic-io.useQueryStates.tsx"
    },
    "/conditional-rendering/useQueryState": {
      "filePath": "conditional-rendering.useQueryState.tsx"
    },
    "/conditional-rendering/useQueryStates": {
      "filePath": "conditional-rendering.useQueryStates.tsx"
    },
    "/form/useQueryState": {
      "filePath": "form.useQueryState.tsx"
    },
    "/form/useQueryStates": {
      "filePath": "form.useQueryStates.tsx"
    },
    "/linking/useQueryState": {
      "filePath": "linking.useQueryState.tsx",
      "children": [
        "/linking/useQueryState/other"
      ]
    },
    "/linking/useQueryStates": {
      "filePath": "linking.useQueryStates.tsx",
      "children": [
        "/linking/useQueryStates/other"
      ]
    },
    "/push/useQueryState": {
      "filePath": "push.useQueryState.tsx"
    },
    "/push/useQueryStates": {
      "filePath": "push.useQueryStates.tsx"
    },
    "/referential-stability/useQueryState": {
      "filePath": "referential-stability.useQueryState.tsx"
    },
    "/referential-stability/useQueryStates": {
      "filePath": "referential-stability.useQueryStates.tsx"
    },
    "/routing/useQueryState": {
      "filePath": "routing.useQueryState.tsx",
      "children": [
        "/routing/useQueryState/other"
      ]
    },
    "/routing/useQueryStates": {
      "filePath": "routing.useQueryStates.tsx",
      "children": [
        "/routing/useQueryStates/other"
      ]
    },
    "/shallow/useQueryState": {
      "filePath": "shallow.useQueryState.tsx"
    },
    "/shallow/useQueryStates": {
      "filePath": "shallow.useQueryStates.tsx"
    },
    "/linking/useQueryState/other": {
      "filePath": "linking.useQueryState.other.tsx",
      "parent": "/linking/useQueryState"
    },
    "/linking/useQueryStates/other": {
      "filePath": "linking.useQueryStates.other.tsx",
      "parent": "/linking/useQueryStates"
    },
    "/routing/useQueryState/other": {
      "filePath": "routing.useQueryState.other.tsx",
      "parent": "/routing/useQueryState"
    },
    "/routing/useQueryStates/other": {
      "filePath": "routing.useQueryStates.other.tsx",
      "parent": "/routing/useQueryStates"
    }
  }
}
ROUTE_MANIFEST_END */
